% rd1.m:  Front end for opening a data file.  RD1 does some basic% initialization and then prompts you for the file you wish to open.% Usage: rd%% Supported formats (as of March 2003): RTRV (.dat)     ACSII (.txt),%                                       ASD (.asd),     LabVIEW (.lab)     %                                       Ober2 (.obr)    Raw Binary (.bin)% written by  Jonathan Jacobs%             September 1995 - March 2007  (last mod: 03/30/07)% modified by King Yi%             04/27/11  - Modified code to read in DS and TL input%                         channels that represent the digital stimulus output%                         and galvo laser on/off times.function [rh,rv,lh,lv,samp_freq] = rd_cli(strFile)[strPath,strName,strExt] = fileparts(strFile);PATHNAME = [strPath filesep];FILENAME = [strName strExt];curdir=pwd;%initialize the variables we will needif ~exist('inited'), inited = 0; endif ~inited   %disp('initializing')   rdclear  % clear RD's variables   dataclr  % clear the data structures   global2  % initialize the data structures   setroot   cd(matlabroot)   cd(findomprefs)   try      load enviroG.mat   catch      beep      disp('Initializing OMtools environment variable.')      enviro   end   showGraphs  = enviroG(1);  doLoadSacs  = enviroG(2);   doScaling   = enviroG(3);  doRefix     = enviroG(4);    doFiltering = enviroG(5);  doUnfolding = enviroG(6);   doXTalkRmvl = enviroG(7);  doHeadAdj   = enviroG(8);   debugme     = enviroG(9);  export      = enviroG(10);   useTimeAxis = enviroG(11);   omdir   a_files = 0; r_files = 0; b_files = 0;   o_files = 0; x_files = 0; l_files = 0;   max_len_l=0; max_len_r=0;   rh=[]; lh=[]; rv=[]; lv=[]; rt=[]; lt=[]; hh=[]; hv=[]; st=[]; ds=[]; tl=[];    inited = 1;   eval('cd(curdir)','disp(''rd: error.  Last data source directory missing.'')')endv=version;[comp, maxsize] = computer; switch comp(1) case 'M'   if v(1)<= '5'      filefilter = '*.*';      sep = ':';      rdpath_flag = 1;    elseif v(1) >= '6'      filefilter={['*.lab;*.txt;*.bin;*.dat;*.obr;*.asd;*.mat;',...      			   '*.LAB;*.TXT;*.BIN;*.DAT;*.OBR;*.ASD;*.MAT;'],...      			   'lab txt bin dat obr asd mat' };      sep = '/';      rdpath_flag = 0;   end    otherwise   if v(1) == '4'      filefilter = ['*.dat *.txt *.mat *.obr *.asd *.lab *.bin'];    else      filefilter = {'*.dat;*.txt;*.mat;*.obr;*.asd;*.lab;*.bin'};      %filefilter = '*.*';   end   sep = '\';   rdpath_flag = 1;end% this moves us to the last directory from which we RD a file.% if anything goes wrong, we are unceremoniously dumped into the% root data directory.if rdpath_flag, rdpath('r'); end[lh_rows, lh_col] = size(lh);  [rh_rows, rh_col] = size(rh);[lv_rows, lv_col] = size(lv);  [rv_rows, rv_col] = size(rv);[lt_rows, lt_col] = size(lt);  [rt_rows, rt_col] = size(rt);[hh_rows, hh_col] = size(hh);  [hv_rows, hv_col] = size(hv);[st_rows, st_col] = size(st);  [sv_rows, sv_col] = size(sv);[ds_rows, ds_col] = size(ds);  [tl_rows, tl_col] = size(tl); col = lh_col + rh_col + lv_col + rv_col + ...      lt_col + rt_col + hh_col + hv_col + st_col + sv_col + ds_col + tl_col;% if col > 0 we have data in the hopperif col > 0   [nFiles, dummy] = size(namearray);   if nFiles == 1, nfstr = ' file'; else nfstr = ' files'; end   disp([num2str(nFiles) nfstr ' already loaded:'])   numFullRows = fix(nFiles/5);   inLastRow   = nFiles - (numFullRows*5);   for i = 1:numFullRows      disp( [namearray((i-1)*5+1,:) namearray((i-1)*5+2,:)...             namearray((i-1)*5+3,:) namearray((i-1)*5+4,:)...             namearray((i-1)*5+5,:)] )   end   remStr = [];   for i = 1:inLastRow      remStr = [remStr namearray(numFullRows*5 + i,:)];   end   disp( remStr )   nFiles = nFiles + 1; else   nFiles = 1;end %if col...% pause(0.5)% time to select a file to open% [filename, pathname] = uigetfile(filefilter, 'Load a data file');filename = FILENAME;pathname = PATHNAME;if filename == 0   % hit the "Cancel" button   disp( 'Canceled.');    rdclear   cd(curdir)   return;endif isempty(what_f_array)   what_f_array = filename;enddisp( ' ' )disp( [ 'Loading ' filename] )exten = filename(find(filename=='.')+1:length(filename));% change to the directory where the data file is.% the '''' is a quoted quote.  this is necessary to allow for% cases where the pathname has a space in it.datapath = pathname(1:length(pathname)-1);eval( ['cd ' '''' datapath ''''], ['setroot; datadir'] )% write the data file's path to 'rdpath.txt'rdpath('w', pwd);% it's file loading time!% do this if we are reading a .mat fileif strcmp(upper(exten), 'MAT')   disp('This is a saved workspace.')   disp('  Do you want to clear the present workspace before')   disp('  loading in this saved workspace (y/n)?')   yorn=lower(input('--> ','s'));   if yorn == 'y'      global temp      temp = filename;      filename = temp;      clear global temp   end   eval(['load ' filename])   returnend% 'shortname' holds the name of the variable that the data% will have when it first loads (if it is an ASCII file).% This will be that name of the file, up to the '.' shortname = upper(filename( 1:find(filename=='.')-1));fullpathname = upper([ pathname filename ]);exten = filename( find(filename=='.')+1:length(filename) );switch lower(exten)   case {'asd'}      fileformat = 'asyst';      rd_asd;   case {'bin'}      fileformat = 'rawbin';      rd_bin;   case {'dat'}      fileformat = 'retrieve';      rd_rtrv;   case {'lab'}      fileformat = 'labview';      rd_labv;   case {'obr'}      fileformat = 'ober2';      rd_ober2;   case {'txt'}      fileformat = 'ascii';      rd_ascii;   case {''}      disp('this file has no extension.  Please add the appropriate')             disp('three-letter type (e.g. ''.lab'', ''.obr'', ''.txt'', etc.)')      fileformat = 'unknown';      return   otherwise      disp('This is NOT an ASCII data file,') % Great Galloping Gonads, Batman!      disp('it''s is not a RETRIEVE file,')   % There's something TERRIBLY       disp('it''s is not an ober2 file,')        % wrong here.  Panic.      disp('it''s is not an LabVIEW file,')      disp('it''s is not a raw binary file,')      disp('and it''s is not an ASYST file.')      disp('Quite frankly, I''m stumped.  Please make sure that the')       disp('file name has a known three-letter extension at its end.')      fileformat = 'unknown';      returnend% rd_xxxx modules read data into 'newdata' and then call 'unfold'% followed by 'getbias' and 'applybias' to get data into calibrated shape.% remove any crosstalk[xtfactors, xt_err_flag] = readxtalk(filename);if ~xt_err_flag   newdata = removextalk(newdata, xtfactors, chName); end% update the lists (string and array) of file namesnamelist = upper([namelist, filename, ' ']); namepad = blanks(13 - length(filename));namearray = upper([namearray; filename, namepad]);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% we have loaded the data and done all offsetting/scaling.  Now% we need to add the data to the arrays, load the SCP data, plot% the whole mess and do any local shifting ('refix').% what eyes & directions are present?[lh_rows, lh_col] = size(lh);  [rh_rows, rh_col] = size(rh);[lv_rows, lv_col] = size(lv);  [rv_rows, rv_col] = size(rv);[lt_rows, lt_col] = size(lt);  [rt_rows, rt_col] = size(rt);[hh_rows, hh_col] = size(hh);  [hv_rows, hv_col] = size(hv);[st_rows, st_col] = size(st);  [sv_rows, sv_col] = size(sv);[ds_rows, ds_col] = size(ds);  [tl_rows, tl_col] = size(tl); col = lh_col + rh_col + lv_col + rv_col +...      lt_col + rt_col + hh_col + hv_col + st_col + sv_col + ds_col + tl_col; longestL = max( [lh_rows lv_rows lt_rows] );longestR = max( [rh_rows rv_rows rt_rows] );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Time to append the new data to the existing eye/direction arrays.% For safety's sake, to keep the has_XX arrays up to date, we% first make the newest entry a zero.  If there are actually % SCPs for this channel, the appropriate has_XX array entry% will then be set to one.   has_LH(total_files) = 0; has_RH(total_files) = 0; has_LV(total_files) = 0; has_RV(total_files) = 0; has_LT(total_files) = 0; has_RT(total_files) = 0; has_HH(total_files) = 0; has_HV(total_files) = 0;has_ST(total_files) = 0; has_SV(total_files) = 0;has_DS(total_files) = 0; has_TL(total_files) = 0; hasData(total_files,1:12) = zeros(1,12);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% oh, yeah, one more thing...  What do we do about head position?% we need to check for it and then decide whether to modify the % rh, lh, rv, lv data.  Should this be done before adding the data to % the arrays or not?  I suspect that the CORRECTED data should be added% which is what I've done here.% Ask rjl what he would like.  (12/13/96)% look for hh, hv data.  If it exists we need to decide whether or% not to modify the lh, rh, lv, rv data.chName = setstr(chName);HHadj = 0; HVadj = 0;if (doHeadAdj)   for xx = 1:dat_cols      if strcmp(lower(chName(xx,:)), 'hh')         disp( ' ' )         disp('* Horizontal head coil data found.  Use it to')         disp('  correct the ''lh'', ''rh'' data? (y/n) ')         doHHeadCoil = input( '--> ', 's');         if lower(doHHeadCoil) == 'y'            HHadj = 1;            HHindex = xx;         end       elseif strcmp(lower(chName(xx,:)), 'hv')         disp( ' ' )         disp('* Vertical head coil data found.  Use it to')         disp('  correct the ''lv'', ''rv'' data? (y/n) ')         doVHeadCoil = input( '--> ', 's');         if lower(doVHeadCoil) == 'y'            HVadj = 1;            HVindex = xx;         end      end   endend %if doHeadAdj% now we actually put the data into arrays and update some housekeeping.for xx = 1:dat_cols   col = col + 1;   sampFreq(nFiles) = samp_freq(1);   %samp_freq = sampFreq(1);  % hopefully this is temporary.   switch lower(chName(xx,:))    case {'lh'}      has_LH(total_files) = 1;      if (HHadj==1)         newdata(:,xx) = newdata(:,xx) - newdata(:, HHindex);      end      disp( ' Adding new data to array: lh' )      lh = add_col( lh, newdata(:,xx), nFiles );      which_eye(col,:) = 'lh';    case {'rh'}      has_RH(total_files) = 1;      if (HHadj==1)         newdata(:,xx) = newdata(:,xx) - newdata(:, HHindex);      end      disp( ' Adding new data to array: rh' )      rh = add_col( rh, newdata(:,xx), nFiles );      which_eye(col,:) = 'rh';    case {'lv'}      has_LV(total_files) = 1;      if (HVadj==1)         newdata(:,xx) = newdata(:,xx) - newdata(:, HVindex);      end      disp( ' Adding new data to array: lv' )      lv = add_col( lv, newdata(:,xx), nFiles );      which_eye(col,:) = 'lv';    case {'rv'}      has_RV(total_files) = 1;      if (HVadj==1)         newdata(:,xx) = newdata(:,xx) - newdata(:, HVindex);      end      disp( ' Adding new data to array: rv' )      rv = add_col( rv, newdata(:,xx), nFiles );      which_eye(col,:) = 'rv';    case {'lt'}      has_LT(total_files) = 1;      disp( ' Adding new data to array: lt' )      lt = add_col( lt, newdata(:,xx), nFiles );      which_eye(col,:) = 'lt';    case {'rt'}      has_RT(total_files) = 1;      disp( ' Adding new data to array: rt' )      rt = add_col( rt, newdata(:,xx), nFiles );      which_eye(col,:) = 'rt';    case {'hh'}      has_HH(total_files) = 1;      disp( ' Adding new data to array: hh' )      hh = add_col( hh, newdata(:,xx), nFiles );      which_eye(col,:) = 'hh';    case {'hv'}      has_HV(total_files) = 1;      disp( ' Adding new data to array: hv' )      hv = add_col( hv, newdata(:,xx), nFiles );      which_eye(col,:) = 'hv';    case {'st'}      has_ST(total_files) = 1;      disp( ' Adding new data to array: st' )      st = add_col( st, newdata(:,xx), nFiles );      which_eye(col,:) = 'st';    case {'sv'}      has_SV(total_files) = 1;      disp( ' Adding new data to array: sv' )      sv = add_col( sv, newdata(:,xx), nFiles );      which_eye(col,:) = 'sv';        case {'ds'}       has_DS(total_files) = 1;      disp( ' Adding new data to array: ds' )      ds = add_col( ds, newdata(:,xx), nFiles );      which_eye(col,:) = 'ds';          case {'tl'}       has_TL(total_files) = 1;      disp( ' Adding new data to array: tl' )      tl = add_col( tl, newdata(:,xx), nFiles );      which_eye(col,:) = 'tl';          case {'var'}      which_eye(col,:) = lower(chName(xx,:));      eval( [lower(chName(xx,:)) ' = add_col( '...             lower(chName(xx,:)) ', newdata(:,xx), nFiles );'] );   endendif exist('ds')    % Passive D/A Converter Lookup Table (See Hardware Documentation for more details)    %    %  DS Output    %   Voltage    % (Scaled x10)     Deg    %     0.4           15    %     0.8           10    %     1.6            5    %     3.2            0    %     6.4           -5    %    12.8          -10    %    25.6          -15     d_raw=[0.04 0.08 0.16 0.32 0.64 1.28 2.56]*10;    d_scaled=[15 10 5 0 -5 -10 -15];    ds=interp1(d_raw,d_scaled,ds,'linear','extrap');endif exist('tl')    % Invert Galvo Laser on/off state (off = 0, on = 1)    tl=-tl+5;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% read in the saccade control points file ( 'xxxxxxx.s' )if (doLoadSacs)   sacpt_file = upper([shortname '.s']);    [sacv_on, sacp_on, sacp_off, sacv_off, prev_fov_pt,slow_peak, max_v_pt,...    cycle_beg, cycle_end, eye, w_form, s_type, sac_loaded] = rdscp(sacpt_file);   [temp,count]=size(sacv_on);else   sac_loaded = 0;endhasSacPts(total_files,:) = [0 0 0 0 0 0];whichWFST(total_files,:) = '?????   ?????????????'; %5,3,13if sac_loaded   pick_wfst   fill_scp end% plot the data & saccadescolor = ['y','c','m','r','b','g','w'];if (showGraphs)   figure   for xx = 1:dat_cols      if sac_loaded        if strcmp(lower(chName(xx,:)), 'lh')              [max_len_l, lh_col] = size( lh );           sacOnTemp = sacp_on_lh(:,lh_col);     % could be NaNs           sacOffTemp = sacp_off_lh(:,lh_col);   % could be NaNs         elseif strcmp(lower(chName(xx,:)), 'rh')              [max_len_r, rh_col] = size( rh );           sacOnTemp = sacp_on_rh(:,rh_col);           sacOffTemp = sacp_off_rh(:,rh_col);         elseif strcmp(lower(chName(xx,:)), 'lv')              [max_len_l, lv_col] = size( lv );           sacOnTemp = sacp_on_lv(:,lv_col);           sacOffTemp = sacp_off_lv(:,lv_col);         elseif strcmp(lower(chName(xx,:)), 'rv')              [max_len_r, rv_col] = size( rv );           sacOnTemp = sacp_on_rv(:,rv_col);           sacOffTemp = sacp_off_rv(:,rv_col);            elseif strcmp(lower(chName(xx,:)), 'lt')              [max_len_l, lt_col] = size( lt );           sacOnTemp = sacp_on_lt(:,lt_col);           sacOffTemp = sacp_off_lt(:,lt_col);         elseif strcmp(lower(chName(xx,:)), 'rt')              [max_len_r, rt_col] = size( rt );           sacOnTemp = sacp_on_rt(:,rt_col);           sacOffTemp = sacp_off_rt(:,rt_col);        end      end %if sac_loaded           dat_len = length(find(newdata(:,xx)<100000));      if (useTimeAxis)         t = (1:dat_len)/samp_freq(1);         x_label = 'time (seconds)';         x_factor = samp_freq;       else         t = 1:dat_len;         x_label = 'sample number';         x_factor = 1.0;      end      hold on      plot( t, newdata(1:dat_len, xx ),color(xx) )      hold on      if (sac_loaded)         numSPts = length(find(sacOnTemp<100000));         if numSPts            on  = [1; sacOnTemp(1:numSPts); dat_len];            off = [1; sacOffTemp(1:numSPts); dat_len];            plot( on/x_factor,  newdata(on, xx), 'go', 'Marker', 4)               plot( off/x_factor, newdata(off, xx), 'co', 'Marker', 4)            end      end      drawrad(0, 0.5, 0, 0,'w',1);      xlabel( x_label )      ylabel( 'position (deg)' )      hold off   end %if xx   title( [ filename ] )end %for (showGraphs)%title( [ filename '   (' chName(xx,:) ')' ] )% do any further post-processingif (doRefix)    , refix(filename); endif (doFiltering), dofilt; end% load the digital stimulus file if it appliesrd_dig;   disp( ' ' )% go to OMLAB directory%omdir% clean up.if (~debugme)   rdclearend